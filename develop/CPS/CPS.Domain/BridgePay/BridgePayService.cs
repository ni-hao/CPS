//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Net;
using System.Runtime.Remoting;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=4.0.30319.1.
// 



namespace CPS.Domain.BridgePay
{
    public interface IBridgePayWS
    {

        /// <remarks/>
        [SoapDocumentMethod(
            "http://federation.caspio.com/BridgePayWS/GetInvoicesList",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        string GetInvoicesList(string key, int accountId);

        /// <remarks/>
        [SoapDocumentMethod(
            "http://federation.caspio.com/BridgePayWS/GetReceiptsList",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        string GetReceiptsList(string key, int accountId, System.DateTime fromDateUTC, System.DateTime toDateUTC);

        /// <remarks/>
        [SoapDocumentMethod(
            "http://federation.caspio.com/BridgePayWS/GetInvoicesPrintableFile",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: XmlElement(DataType = "base64Binary")]
        byte[] GetInvoicesPrintableFile(string key, int accountId, int invoiceId);

        
        /// <remarks/>
        [SoapDocumentMethod(
            "http://federation.caspio.com/BridgePayWS/GetReceiptsPrintableFile",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: XmlElement(DataType = "base64Binary")]
        byte[] GetReceiptsPrintableFile(string key, int accountId, int receiptId);

        /// <remarks/>
        [SoapDocumentMethod(
            "http://federation.caspio.com/BridgePayWS/GetAccountPackage",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        string GetAccountPackage(string key, int accountId);

       
        /// <remarks/>
        [SoapDocumentMethod(
            "http://federation.caspio.com/BridgePayWS/CheckPromotionCode",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        string CheckPromotionCode(string key, int accountId, string promotionCodeValue, int newAccountTypeId);

       
        /// <remarks/>
        [SoapDocumentMethod(
            "http://federation.caspio.com/BridgePayWS/CalcNewPackage",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        string CalcNewPackage(string key, int accountId, string requestXml);

        
        /// <remarks/>
        [SoapDocumentMethod(
            "http://federation.caspio.com/BridgePayWS/GetAvailableAddOns",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        string GetAvailableAddOns(string key, int accountId, int newTypeId);

       

        /// <remarks/>
        [SoapDocumentMethod(
            "http://federation.caspio.com/BridgePayWS/ListIndustries",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        System.Data.DataTable ListIndustries();

       
        /// <remarks/>
        [SoapDocumentMethod(
            "http://federation.caspio.com/BridgePayWS/ListCountries",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        System.Data.DataTable ListCountries();

        
        /// <remarks/>
        [SoapDocumentMethod(
            "http://federation.caspio.com/BridgePayWS/CPSValidateSession",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        void CPSValidateSession(string key, string sessionKey);


        /// <remarks/>
        [SoapDocumentMethod(
            "http://federation.caspio.com/BridgePayWS/CPSValidateAccountPassword",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        string CPSValidateAccountPassword(string key, string AccountName, string UserName, string Password);

       

        /// <remarks/>
        [SoapDocumentMethod(
            "http://federation.caspio.com/BridgePayWS/CPSGetAccountPackages",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        System.Data.DataTable CPSGetAccountPackages(string key, string sessionKey);

        /// <remarks/>
        [SoapDocumentMethod(
            "http://federation.caspio.com/BridgePayWS/CPSGetCurrentAccountPackage",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        string CPSGetCurrentAccountPackage(string key, string sessionKey);


        /// <remarks/>
        [SoapDocumentMethod(
            "http://federation.caspio.com/BridgePayWS/CPSGetAvailableAddOns",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        string CPSGetAvailableAddOns(string key, string sessionKey, int packageId);

        /// <remarks/>
        System.IAsyncResult BeginCPSGetAvailableAddOns(string key, string sessionKey, int packageId,
                                                                       System.AsyncCallback callback, object asyncState);

        /// <remarks/>
        string EndCPSGetAvailableAddOns(System.IAsyncResult asyncResult);

        /// <remarks/>
        void CPSGetAvailableAddOnsAsync(string key, string sessionKey, int packageId);

        /// <remarks/>
        void CPSGetAvailableAddOnsAsync(string key, string sessionKey, int packageId, object userState);

        /// <remarks/>
        [SoapDocumentMethod(
            "http://federation.caspio.com/BridgePayWS/CPSCheckPromotionCode",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        string CPSCheckPromotionCode(string key, string sessionKey, string promotionCodeValue, int packageId);

        /// <remarks/>
        System.IAsyncResult BeginCPSCheckPromotionCode(string key, string sessionKey, string promotionCodeValue,
                                                                       int packageId, System.AsyncCallback callback,
                                                                       object asyncState);

        /// <remarks/>
        string EndCPSCheckPromotionCode(System.IAsyncResult asyncResult);

        /// <remarks/>
        void CPSCheckPromotionCodeAsync(string key, string sessionKey, string promotionCodeValue, int packageId);

        /// <remarks/>
        void CPSCheckPromotionCodeAsync(string key, string sessionKey, string promotionCodeValue, int packageId,
                                                        object userState);

        /// <remarks/>
        [SoapDocumentMethod(
            "http://federation.caspio.com/BridgePayWS/CPSGetContactInfo",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        System.Data.DataTable CPSGetContactInfo(string key, string sessionKey);

        /// <remarks/>
        System.IAsyncResult BeginCPSGetContactInfo(string key, string sessionKey, System.AsyncCallback callback,
                                                                   object asyncState);

        /// <remarks/>
        System.Data.DataTable EndCPSGetContactInfo(System.IAsyncResult asyncResult);

        /// <remarks/>
        void CPSGetContactInfoAsync(string key, string sessionKey);

        /// <remarks/>
        void CPSGetContactInfoAsync(string key, string sessionKey, object userState);

        /// <remarks/>
        [SoapDocumentMethod(
            "http://federation.caspio.com/BridgePayWS/CPSGetBillingInfo",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        System.Data.DataTable CPSGetBillingInfo(string key, string sessionKey);

        /// <remarks/>
        System.IAsyncResult BeginCPSGetBillingInfo(string key, string sessionKey, System.AsyncCallback callback,
                                                                   object asyncState);

        /// <remarks/>
        System.Data.DataTable EndCPSGetBillingInfo(System.IAsyncResult asyncResult);

        /// <remarks/>
        void CPSGetBillingInfoAsync(string key, string sessionKey);

        /// <remarks/>
        void CPSGetBillingInfoAsync(string key, string sessionKey, object userState);

        /// <remarks/>
        [SoapDocumentMethod(
            "http://federation.caspio.com/BridgePayWS/CPSSetContactInfo",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        void CPSSetContactInfo(
            string key,
            string sessionKey,
            string firstName,
            string lastName,
            string title,
            string company,
            string employees,
            string industry,
            string phone,
            string secondaryPhone,
            string email,
            string url,
            string address1,
            string address2,
            string city,
            string state,
            string country,
            string zip);

        /// <remarks/>
        System.IAsyncResult BeginCPSSetContactInfo(
            string key,
            string sessionKey,
            string firstName,
            string lastName,
            string title,
            string company,
            string employees,
            string industry,
            string phone,
            string secondaryPhone,
            string email,
            string url,
            string address1,
            string address2,
            string city,
            string state,
            string country,
            string zip,
            System.AsyncCallback callback,
            object asyncState);

        /// <remarks/>
        void EndCPSSetContactInfo(System.IAsyncResult asyncResult);

        /// <remarks/>
        void CPSSetContactInfoAsync(
            string key,
            string sessionKey,
            string firstName,
            string lastName,
            string title,
            string company,
            string employees,
            string industry,
            string phone,
            string secondaryPhone,
            string email,
            string url,
            string address1,
            string address2,
            string city,
            string state,
            string country,
            string zip);

        /// <remarks/>
        void CPSSetContactInfoAsync(
            string key,
            string sessionKey,
            string firstName,
            string lastName,
            string title,
            string company,
            string employees,
            string industry,
            string phone,
            string secondaryPhone,
            string email,
            string url,
            string address1,
            string address2,
            string city,
            string state,
            string country,
            string zip,
            object userState);

        /// <remarks/>
        [SoapDocumentMethod(
            "http://federation.caspio.com/BridgePayWS/CPSSetBillingInfo",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        void CPSSetBillingInfo(
            string firstName,
            string lastName,
            string address1,
            string address2,
            string city,
            string state,
            string zip,
            string country,
            string phone,
            string email,
            string ccNumber,
            string ccType,
            string ccExpMonth,
            string ccExpYear,
            bool emailReceipt,
            string receiptEmails);

        /// <remarks/>
        System.IAsyncResult BeginCPSSetBillingInfo(
            string firstName,
            string lastName,
            string address1,
            string address2,
            string city,
            string state,
            string zip,
            string country,
            string phone,
            string email,
            string ccNumber,
            string ccType,
            string ccExpMonth,
            string ccExpYear,
            bool emailReceipt,
            string receiptEmails,
            System.AsyncCallback callback,
            object asyncState);

        /// <remarks/>
        void EndCPSSetBillingInfo(System.IAsyncResult asyncResult);

        /// <remarks/>
        void CPSSetBillingInfoAsync(
            string firstName,
            string lastName,
            string address1,
            string address2,
            string city,
            string state,
            string zip,
            string country,
            string phone,
            string email,
            string ccNumber,
            string ccType,
            string ccExpMonth,
            string ccExpYear,
            bool emailReceipt,
            string receiptEmails);

        /// <remarks/>
        void CPSSetBillingInfoAsync(
            string firstName,
            string lastName,
            string address1,
            string address2,
            string city,
            string state,
            string zip,
            string country,
            string phone,
            string email,
            string ccNumber,
            string ccType,
            string ccExpMonth,
            string ccExpYear,
            bool emailReceipt,
            string receiptEmails,
            object userState);

        /// <remarks/>
        [SoapDocumentMethod(
            "http://federation.caspio.com/BridgePayWS/CPSCalcNewPackage",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        string CPSCalcNewPackage(string key, string sessionKey, string newPackageName, int newBillingCycle,
                                                 int promoCodeId, string addOnsXml);

        /// <remarks/>
        System.IAsyncResult BeginCPSCalcNewPackage(string key, string sessionKey, string newPackageName,
                                                                   int newBillingCycle, int promoCodeId, string addOnsXml,
                                                                   System.AsyncCallback callback, object asyncState);

        /// <remarks/>
        string EndCPSCalcNewPackage(System.IAsyncResult asyncResult);

        /// <remarks/>
        void CPSCalcNewPackageAsync(string key, string sessionKey, string newPackageName, int newBillingCycle,
                                                    int promoCodeId, string addOnsXml);

        /// <remarks/>
        void CPSCalcNewPackageAsync(string key, string sessionKey, string newPackageName, int newBillingCycle,
                                                    int promoCodeId, string addOnsXml, object userState);

        /// <remarks/>
        [SoapDocumentMethod(
            "http://federation.caspio.com/BridgePayWS/CPSDoUpgradeDowngradeAccount",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        string CPSDoUpgradeDowngradeAccount(string key, string sessionKey, string newPackageName,
                                                            int newBillingCycle, int promoCodeId, string addOnsXml);

        /// <remarks/>
        System.IAsyncResult BeginCPSDoUpgradeDowngradeAccount(string key, string sessionKey,
                                                                              string newPackageName, int newBillingCycle,
                                                                              int promoCodeId, string addOnsXml,
                                                                              System.AsyncCallback callback, object asyncState);

        /// <remarks/>
        string EndCPSDoUpgradeDowngradeAccount(System.IAsyncResult asyncResult);

        /// <remarks/>
        void CPSDoUpgradeDowngradeAccountAsync(string key, string sessionKey, string newPackageName,
                                                               int newBillingCycle, int promoCodeId, string addOnsXml);

        /// <remarks/>
        void CPSDoUpgradeDowngradeAccountAsync(string key, string sessionKey, string newPackageName,
                                                               int newBillingCycle, int promoCodeId, string addOnsXml,
                                                               object userState);

        /// <remarks/>
        new void CancelAsync(object userState);

        void Discover();
        void Abort();
        void Dispose();
        string ToString();
        event EventHandler Disposed;
        object GetLifetimeService();
        object InitializeLifetimeService();
        ObjRef CreateObjRef(Type requestedType);
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "BridgePayWSSoap",
        Namespace = "http://federation.caspio.com/BridgePayWS")]
    public partial class BridgePayWS : System.Web.Services.Protocols.SoapHttpClientProtocol, IBridgePayWS
    {

        private System.Threading.SendOrPostCallback DoCancelAccountOperationCompleted;

        private System.Threading.SendOrPostCallback DoUpgradeDowngradeAccountOperationCompleted;

        private System.Threading.SendOrPostCallback DoChargePastDueAccountOperationCompleted;

        private System.Threading.SendOrPostCallback GetInvoicesListOperationCompleted;

        private System.Threading.SendOrPostCallback GetReceiptsListOperationCompleted;

        private System.Threading.SendOrPostCallback GetInvoicesPrintableFileOperationCompleted;

        private System.Threading.SendOrPostCallback GetReceiptsPrintableFileOperationCompleted;

        private System.Threading.SendOrPostCallback GetAccountPackageOperationCompleted;

        private System.Threading.SendOrPostCallback CheckPromotionCodeOperationCompleted;

        private System.Threading.SendOrPostCallback CalcNewPackageOperationCompleted;

        private System.Threading.SendOrPostCallback GetAvailableAddOnsOperationCompleted;

        private System.Threading.SendOrPostCallback ListIndustriesOperationCompleted;

        private System.Threading.SendOrPostCallback ListCountriesOperationCompleted;

        private System.Threading.SendOrPostCallback CPSValidateSessionOperationCompleted;

        private System.Threading.SendOrPostCallback CPSValidateAccountPasswordOperationCompleted;

        private System.Threading.SendOrPostCallback CPSGetAccountPackagesOperationCompleted;

        private System.Threading.SendOrPostCallback CPSGetCurrentAccountPackageOperationCompleted;

        private System.Threading.SendOrPostCallback CPSGetAvailableAddOnsOperationCompleted;

        private System.Threading.SendOrPostCallback CPSCheckPromotionCodeOperationCompleted;

        private System.Threading.SendOrPostCallback CPSGetContactInfoOperationCompleted;

        private System.Threading.SendOrPostCallback CPSGetBillingInfoOperationCompleted;

        private System.Threading.SendOrPostCallback CPSSetContactInfoOperationCompleted;

        private System.Threading.SendOrPostCallback CPSSetBillingInfoOperationCompleted;

        private System.Threading.SendOrPostCallback CPSCalcNewPackageOperationCompleted;

        private System.Threading.SendOrPostCallback CPSDoUpgradeDowngradeAccountOperationCompleted;

        /// <remarks/>
        public BridgePayWS()
        {
            this.Url = "http://federation/bridgepayws/bridgepayws.asmx";
        }

        /// <remarks/>
        public event DoCancelAccountCompletedEventHandler DoCancelAccountCompleted;

        /// <remarks/>
        public event DoUpgradeDowngradeAccountCompletedEventHandler DoUpgradeDowngradeAccountCompleted;

        /// <remarks/>
        public event DoChargePastDueAccountCompletedEventHandler DoChargePastDueAccountCompleted;

        /// <remarks/>
        public event GetInvoicesListCompletedEventHandler GetInvoicesListCompleted;

        /// <remarks/>
        public event GetReceiptsListCompletedEventHandler GetReceiptsListCompleted;

        /// <remarks/>
        public event GetInvoicesPrintableFileCompletedEventHandler GetInvoicesPrintableFileCompleted;

        /// <remarks/>
        public event GetReceiptsPrintableFileCompletedEventHandler GetReceiptsPrintableFileCompleted;

        /// <remarks/>
        public event GetAccountPackageCompletedEventHandler GetAccountPackageCompleted;

        /// <remarks/>
        public event CheckPromotionCodeCompletedEventHandler CheckPromotionCodeCompleted;

        /// <remarks/>
        public event CalcNewPackageCompletedEventHandler CalcNewPackageCompleted;

        /// <remarks/>
        public event GetAvailableAddOnsCompletedEventHandler GetAvailableAddOnsCompleted;

        /// <remarks/>
        public event ListIndustriesCompletedEventHandler ListIndustriesCompleted;

        /// <remarks/>
        public event ListCountriesCompletedEventHandler ListCountriesCompleted;

        /// <remarks/>
        public event CPSValidateSessionCompletedEventHandler CPSValidateSessionCompleted;

        /// <remarks/>
        public event CPSValidateAccountPasswordCompletedEventHandler CPSValidateAccountPasswordCompleted;

        /// <remarks/>
        public event CPSGetAccountPackagesCompletedEventHandler CPSGetAccountPackagesCompleted;

        /// <remarks/>
        public event CPSGetCurrentAccountPackageCompletedEventHandler CPSGetCurrentAccountPackageCompleted;

        /// <remarks/>
        public event CPSGetAvailableAddOnsCompletedEventHandler CPSGetAvailableAddOnsCompleted;

        /// <remarks/>
        public event CPSCheckPromotionCodeCompletedEventHandler CPSCheckPromotionCodeCompleted;

        /// <remarks/>
        public event CPSGetContactInfoCompletedEventHandler CPSGetContactInfoCompleted;

        /// <remarks/>
        public event CPSGetBillingInfoCompletedEventHandler CPSGetBillingInfoCompleted;

        /// <remarks/>
        public event CPSSetContactInfoCompletedEventHandler CPSSetContactInfoCompleted;

        /// <remarks/>
        public event CPSSetBillingInfoCompletedEventHandler CPSSetBillingInfoCompleted;

        /// <remarks/>
        public event CPSCalcNewPackageCompletedEventHandler CPSCalcNewPackageCompleted;

        /// <remarks/>
        public event CPSDoUpgradeDowngradeAccountCompletedEventHandler CPSDoUpgradeDowngradeAccountCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute(
            "http://federation.caspio.com/BridgePayWS/DoCancelAccount",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DoCancelAccount(string key, int accountId, string cancelReason, string cancelDescription,
                                      string cancelFeedback, string cancelReplacement, int cancelSatisfaction,
                                      int cancelConsideration)
        {
            object[] results = this.Invoke("DoCancelAccount", new object[]
                                                                  {
                                                                      key,
                                                                      accountId,
                                                                      cancelReason,
                                                                      cancelDescription,
                                                                      cancelFeedback,
                                                                      cancelReplacement,
                                                                      cancelSatisfaction,
                                                                      cancelConsideration
                                                                  });
            return ((string) (results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDoCancelAccount(string key, int accountId, string cancelReason,
                                                        string cancelDescription, string cancelFeedback,
                                                        string cancelReplacement, int cancelSatisfaction,
                                                        int cancelConsideration, System.AsyncCallback callback,
                                                        object asyncState)
        {
            return this.BeginInvoke("DoCancelAccount", new object[]
                                                           {
                                                               key,
                                                               accountId,
                                                               cancelReason,
                                                               cancelDescription,
                                                               cancelFeedback,
                                                               cancelReplacement,
                                                               cancelSatisfaction,
                                                               cancelConsideration
                                                           }, callback, asyncState);
        }

        /// <remarks/>
        public string EndDoCancelAccount(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string) (results[0]));
        }

        /// <remarks/>
        public void DoCancelAccountAsync(string key, int accountId, string cancelReason, string cancelDescription,
                                         string cancelFeedback, string cancelReplacement, int cancelSatisfaction,
                                         int cancelConsideration)
        {
            this.DoCancelAccountAsync(key, accountId, cancelReason, cancelDescription, cancelFeedback, cancelReplacement,
                                      cancelSatisfaction, cancelConsideration, null);
        }

        /// <remarks/>
        public void DoCancelAccountAsync(string key, int accountId, string cancelReason, string cancelDescription,
                                         string cancelFeedback, string cancelReplacement, int cancelSatisfaction,
                                         int cancelConsideration, object userState)
        {
            if ((this.DoCancelAccountOperationCompleted == null))
            {
                this.DoCancelAccountOperationCompleted =
                    new System.Threading.SendOrPostCallback(this.OnDoCancelAccountOperationCompleted);
            }
            this.InvokeAsync("DoCancelAccount", new object[]
                                                    {
                                                        key,
                                                        accountId,
                                                        cancelReason,
                                                        cancelDescription,
                                                        cancelFeedback,
                                                        cancelReplacement,
                                                        cancelSatisfaction,
                                                        cancelConsideration
                                                    }, this.DoCancelAccountOperationCompleted, userState);
        }

        private void OnDoCancelAccountOperationCompleted(object arg)
        {
            if ((this.DoCancelAccountCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs =
                    ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                this.DoCancelAccountCompleted(this,
                                              new DoCancelAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                                    invokeArgs.Cancelled,
                                                                                    invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute(
            "http://federation.caspio.com/BridgePayWS/DoUpgradeDowngradeAccount",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DoUpgradeDowngradeAccount(string key, int accountId, string newTypeName, int newBillingCycle,
                                                int promoCodeId, string additionalResourcesXml, string addOnsXml)
        {
            object[] results = this.Invoke("DoUpgradeDowngradeAccount", new object[]
                                                                            {
                                                                                key,
                                                                                accountId,
                                                                                newTypeName,
                                                                                newBillingCycle,
                                                                                promoCodeId,
                                                                                additionalResourcesXml,
                                                                                addOnsXml
                                                                            });
            return ((string) (results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDoUpgradeDowngradeAccount(string key, int accountId, string newTypeName,
                                                                  int newBillingCycle, int promoCodeId,
                                                                  string additionalResourcesXml, string addOnsXml,
                                                                  System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DoUpgradeDowngradeAccount", new object[]
                                                                     {
                                                                         key,
                                                                         accountId,
                                                                         newTypeName,
                                                                         newBillingCycle,
                                                                         promoCodeId,
                                                                         additionalResourcesXml,
                                                                         addOnsXml
                                                                     }, callback, asyncState);
        }

        /// <remarks/>
        public string EndDoUpgradeDowngradeAccount(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string) (results[0]));
        }

        /// <remarks/>
        public void DoUpgradeDowngradeAccountAsync(string key, int accountId, string newTypeName, int newBillingCycle,
                                                   int promoCodeId, string additionalResourcesXml, string addOnsXml)
        {
            this.DoUpgradeDowngradeAccountAsync(key, accountId, newTypeName, newBillingCycle, promoCodeId,
                                                additionalResourcesXml, addOnsXml, null);
        }

        /// <remarks/>
        public void DoUpgradeDowngradeAccountAsync(string key, int accountId, string newTypeName, int newBillingCycle,
                                                   int promoCodeId, string additionalResourcesXml, string addOnsXml,
                                                   object userState)
        {
            if ((this.DoUpgradeDowngradeAccountOperationCompleted == null))
            {
                this.DoUpgradeDowngradeAccountOperationCompleted =
                    new System.Threading.SendOrPostCallback(this.OnDoUpgradeDowngradeAccountOperationCompleted);
            }
            this.InvokeAsync("DoUpgradeDowngradeAccount", new object[]
                                                              {
                                                                  key,
                                                                  accountId,
                                                                  newTypeName,
                                                                  newBillingCycle,
                                                                  promoCodeId,
                                                                  additionalResourcesXml,
                                                                  addOnsXml
                                                              }, this.DoUpgradeDowngradeAccountOperationCompleted,
                             userState);
        }

        private void OnDoUpgradeDowngradeAccountOperationCompleted(object arg)
        {
            if ((this.DoUpgradeDowngradeAccountCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs =
                    ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                this.DoUpgradeDowngradeAccountCompleted(this,
                                                        new DoUpgradeDowngradeAccountCompletedEventArgs(
                                                            invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled,
                                                            invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute(
            "http://federation.caspio.com/BridgePayWS/DoChargePastDueAccount",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DoChargePastDueAccount(string key, int accountId, string oprionsXml)
        {
            object[] results = this.Invoke("DoChargePastDueAccount", new object[]
                                                                         {
                                                                             key,
                                                                             accountId,
                                                                             oprionsXml
                                                                         });
            return ((string) (results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDoChargePastDueAccount(string key, int accountId, string oprionsXml,
                                                               System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DoChargePastDueAccount", new object[]
                                                                  {
                                                                      key,
                                                                      accountId,
                                                                      oprionsXml
                                                                  }, callback, asyncState);
        }

        /// <remarks/>
        public string EndDoChargePastDueAccount(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string) (results[0]));
        }

        /// <remarks/>
        public void DoChargePastDueAccountAsync(string key, int accountId, string oprionsXml)
        {
            this.DoChargePastDueAccountAsync(key, accountId, oprionsXml, null);
        }

        /// <remarks/>
        public void DoChargePastDueAccountAsync(string key, int accountId, string oprionsXml, object userState)
        {
            if ((this.DoChargePastDueAccountOperationCompleted == null))
            {
                this.DoChargePastDueAccountOperationCompleted =
                    new System.Threading.SendOrPostCallback(this.OnDoChargePastDueAccountOperationCompleted);
            }
            this.InvokeAsync("DoChargePastDueAccount", new object[]
                                                           {
                                                               key,
                                                               accountId,
                                                               oprionsXml
                                                           }, this.DoChargePastDueAccountOperationCompleted, userState);
        }

        private void OnDoChargePastDueAccountOperationCompleted(object arg)
        {
            if ((this.DoChargePastDueAccountCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs =
                    ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                this.DoChargePastDueAccountCompleted(this,
                                                     new DoChargePastDueAccountCompletedEventArgs(invokeArgs.Results,
                                                                                                  invokeArgs.Error,
                                                                                                  invokeArgs.Cancelled,
                                                                                                  invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute(
            "http://federation.caspio.com/BridgePayWS/GetInvoicesList",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetInvoicesList(string key, int accountId)
        {
            object[] results = this.Invoke("GetInvoicesList", new object[]
                                                                  {
                                                                      key,
                                                                      accountId
                                                                  });
            return ((string) (results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetInvoicesList(string key, int accountId, System.AsyncCallback callback,
                                                        object asyncState)
        {
            return this.BeginInvoke("GetInvoicesList", new object[]
                                                           {
                                                               key,
                                                               accountId
                                                           }, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetInvoicesList(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string) (results[0]));
        }

        /// <remarks/>
        public void GetInvoicesListAsync(string key, int accountId)
        {
            this.GetInvoicesListAsync(key, accountId, null);
        }

        /// <remarks/>
        public void GetInvoicesListAsync(string key, int accountId, object userState)
        {
            if ((this.GetInvoicesListOperationCompleted == null))
            {
                this.GetInvoicesListOperationCompleted =
                    new System.Threading.SendOrPostCallback(this.OnGetInvoicesListOperationCompleted);
            }
            this.InvokeAsync("GetInvoicesList", new object[]
                                                    {
                                                        key,
                                                        accountId
                                                    }, this.GetInvoicesListOperationCompleted, userState);
        }

        private void OnGetInvoicesListOperationCompleted(object arg)
        {
            if ((this.GetInvoicesListCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs =
                    ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                this.GetInvoicesListCompleted(this,
                                              new GetInvoicesListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                                    invokeArgs.Cancelled,
                                                                                    invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute(
            "http://federation.caspio.com/BridgePayWS/GetReceiptsList",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetReceiptsList(string key, int accountId, System.DateTime fromDateUTC, System.DateTime toDateUTC)
        {
            object[] results = this.Invoke("GetReceiptsList", new object[]
                                                                  {
                                                                      key,
                                                                      accountId,
                                                                      fromDateUTC,
                                                                      toDateUTC
                                                                  });
            return ((string) (results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetReceiptsList(string key, int accountId, System.DateTime fromDateUTC,
                                                        System.DateTime toDateUTC, System.AsyncCallback callback,
                                                        object asyncState)
        {
            return this.BeginInvoke("GetReceiptsList", new object[]
                                                           {
                                                               key,
                                                               accountId,
                                                               fromDateUTC,
                                                               toDateUTC
                                                           }, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetReceiptsList(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string) (results[0]));
        }

        /// <remarks/>
        public void GetReceiptsListAsync(string key, int accountId, System.DateTime fromDateUTC,
                                         System.DateTime toDateUTC)
        {
            this.GetReceiptsListAsync(key, accountId, fromDateUTC, toDateUTC, null);
        }

        /// <remarks/>
        public void GetReceiptsListAsync(string key, int accountId, System.DateTime fromDateUTC,
                                         System.DateTime toDateUTC, object userState)
        {
            if ((this.GetReceiptsListOperationCompleted == null))
            {
                this.GetReceiptsListOperationCompleted =
                    new System.Threading.SendOrPostCallback(this.OnGetReceiptsListOperationCompleted);
            }
            this.InvokeAsync("GetReceiptsList", new object[]
                                                    {
                                                        key,
                                                        accountId,
                                                        fromDateUTC,
                                                        toDateUTC
                                                    }, this.GetReceiptsListOperationCompleted, userState);
        }

        private void OnGetReceiptsListOperationCompleted(object arg)
        {
            if ((this.GetReceiptsListCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs =
                    ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                this.GetReceiptsListCompleted(this,
                                              new GetReceiptsListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                                    invokeArgs.Cancelled,
                                                                                    invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute(
            "http://federation.caspio.com/BridgePayWS/GetInvoicesPrintableFile",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType = "base64Binary")]
        public byte[] GetInvoicesPrintableFile(string key, int accountId, int invoiceId)
        {
            object[] results = this.Invoke("GetInvoicesPrintableFile", new object[]
                                                                           {
                                                                               key,
                                                                               accountId,
                                                                               invoiceId
                                                                           });
            return ((byte[]) (results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetInvoicesPrintableFile(string key, int accountId, int invoiceId,
                                                                 System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetInvoicesPrintableFile", new object[]
                                                                    {
                                                                        key,
                                                                        accountId,
                                                                        invoiceId
                                                                    }, callback, asyncState);
        }

        /// <remarks/>
        public byte[] EndGetInvoicesPrintableFile(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[]) (results[0]));
        }

        /// <remarks/>
        public void GetInvoicesPrintableFileAsync(string key, int accountId, int invoiceId)
        {
            this.GetInvoicesPrintableFileAsync(key, accountId, invoiceId, null);
        }

        /// <remarks/>
        public void GetInvoicesPrintableFileAsync(string key, int accountId, int invoiceId, object userState)
        {
            if ((this.GetInvoicesPrintableFileOperationCompleted == null))
            {
                this.GetInvoicesPrintableFileOperationCompleted =
                    new System.Threading.SendOrPostCallback(this.OnGetInvoicesPrintableFileOperationCompleted);
            }
            this.InvokeAsync("GetInvoicesPrintableFile", new object[]
                                                             {
                                                                 key,
                                                                 accountId,
                                                                 invoiceId
                                                             }, this.GetInvoicesPrintableFileOperationCompleted,
                             userState);
        }

        private void OnGetInvoicesPrintableFileOperationCompleted(object arg)
        {
            if ((this.GetInvoicesPrintableFileCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs =
                    ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                this.GetInvoicesPrintableFileCompleted(this,
                                                       new GetInvoicesPrintableFileCompletedEventArgs(
                                                           invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled,
                                                           invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute(
            "http://federation.caspio.com/BridgePayWS/GetReceiptsPrintableFile",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType = "base64Binary")]
        public byte[] GetReceiptsPrintableFile(string key, int accountId, int receiptId)
        {
            object[] results = this.Invoke("GetReceiptsPrintableFile", new object[]
                                                                           {
                                                                               key,
                                                                               accountId,
                                                                               receiptId
                                                                           });
            return ((byte[]) (results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetReceiptsPrintableFile(string key, int accountId, int receiptId,
                                                                 System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetReceiptsPrintableFile", new object[]
                                                                    {
                                                                        key,
                                                                        accountId,
                                                                        receiptId
                                                                    }, callback, asyncState);
        }

        /// <remarks/>
        public byte[] EndGetReceiptsPrintableFile(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[]) (results[0]));
        }

        /// <remarks/>
        public void GetReceiptsPrintableFileAsync(string key, int accountId, int receiptId)
        {
            this.GetReceiptsPrintableFileAsync(key, accountId, receiptId, null);
        }

        /// <remarks/>
        public void GetReceiptsPrintableFileAsync(string key, int accountId, int receiptId, object userState)
        {
            if ((this.GetReceiptsPrintableFileOperationCompleted == null))
            {
                this.GetReceiptsPrintableFileOperationCompleted =
                    new System.Threading.SendOrPostCallback(this.OnGetReceiptsPrintableFileOperationCompleted);
            }
            this.InvokeAsync("GetReceiptsPrintableFile", new object[]
                                                             {
                                                                 key,
                                                                 accountId,
                                                                 receiptId
                                                             }, this.GetReceiptsPrintableFileOperationCompleted,
                             userState);
        }

        private void OnGetReceiptsPrintableFileOperationCompleted(object arg)
        {
            if ((this.GetReceiptsPrintableFileCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs =
                    ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                this.GetReceiptsPrintableFileCompleted(this,
                                                       new GetReceiptsPrintableFileCompletedEventArgs(
                                                           invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled,
                                                           invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute(
            "http://federation.caspio.com/BridgePayWS/GetAccountPackage",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAccountPackage(string key, int accountId)
        {
            object[] results = this.Invoke("GetAccountPackage", new object[]
                                                                    {
                                                                        key,
                                                                        accountId
                                                                    });
            return ((string) (results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetAccountPackage(string key, int accountId, System.AsyncCallback callback,
                                                          object asyncState)
        {
            return this.BeginInvoke("GetAccountPackage", new object[]
                                                             {
                                                                 key,
                                                                 accountId
                                                             }, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetAccountPackage(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string) (results[0]));
        }

        /// <remarks/>
        public void GetAccountPackageAsync(string key, int accountId)
        {
            this.GetAccountPackageAsync(key, accountId, null);
        }

        /// <remarks/>
        public void GetAccountPackageAsync(string key, int accountId, object userState)
        {
            if ((this.GetAccountPackageOperationCompleted == null))
            {
                this.GetAccountPackageOperationCompleted =
                    new System.Threading.SendOrPostCallback(this.OnGetAccountPackageOperationCompleted);
            }
            this.InvokeAsync("GetAccountPackage", new object[]
                                                      {
                                                          key,
                                                          accountId
                                                      }, this.GetAccountPackageOperationCompleted, userState);
        }

        private void OnGetAccountPackageOperationCompleted(object arg)
        {
            if ((this.GetAccountPackageCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs =
                    ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                this.GetAccountPackageCompleted(this,
                                                new GetAccountPackageCompletedEventArgs(invokeArgs.Results,
                                                                                        invokeArgs.Error,
                                                                                        invokeArgs.Cancelled,
                                                                                        invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute(
            "http://federation.caspio.com/BridgePayWS/CheckPromotionCode",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckPromotionCode(string key, int accountId, string promotionCodeValue, int newAccountTypeId)
        {
            object[] results = this.Invoke("CheckPromotionCode", new object[]
                                                                     {
                                                                         key,
                                                                         accountId,
                                                                         promotionCodeValue,
                                                                         newAccountTypeId
                                                                     });
            return ((string) (results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCheckPromotionCode(string key, int accountId, string promotionCodeValue,
                                                           int newAccountTypeId, System.AsyncCallback callback,
                                                           object asyncState)
        {
            return this.BeginInvoke("CheckPromotionCode", new object[]
                                                              {
                                                                  key,
                                                                  accountId,
                                                                  promotionCodeValue,
                                                                  newAccountTypeId
                                                              }, callback, asyncState);
        }

        /// <remarks/>
        public string EndCheckPromotionCode(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string) (results[0]));
        }

        /// <remarks/>
        public void CheckPromotionCodeAsync(string key, int accountId, string promotionCodeValue, int newAccountTypeId)
        {
            this.CheckPromotionCodeAsync(key, accountId, promotionCodeValue, newAccountTypeId, null);
        }

        /// <remarks/>
        public void CheckPromotionCodeAsync(string key, int accountId, string promotionCodeValue, int newAccountTypeId,
                                            object userState)
        {
            if ((this.CheckPromotionCodeOperationCompleted == null))
            {
                this.CheckPromotionCodeOperationCompleted =
                    new System.Threading.SendOrPostCallback(this.OnCheckPromotionCodeOperationCompleted);
            }
            this.InvokeAsync("CheckPromotionCode", new object[]
                                                       {
                                                           key,
                                                           accountId,
                                                           promotionCodeValue,
                                                           newAccountTypeId
                                                       }, this.CheckPromotionCodeOperationCompleted, userState);
        }

        private void OnCheckPromotionCodeOperationCompleted(object arg)
        {
            if ((this.CheckPromotionCodeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs =
                    ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                this.CheckPromotionCodeCompleted(this,
                                                 new CheckPromotionCodeCompletedEventArgs(invokeArgs.Results,
                                                                                          invokeArgs.Error,
                                                                                          invokeArgs.Cancelled,
                                                                                          invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute(
            "http://federation.caspio.com/BridgePayWS/CalcNewPackage",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CalcNewPackage(string key, int accountId, string requestXml)
        {
            object[] results = this.Invoke("CalcNewPackage", new object[]
                                                                 {
                                                                     key,
                                                                     accountId,
                                                                     requestXml
                                                                 });
            return ((string) (results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCalcNewPackage(string key, int accountId, string requestXml,
                                                       System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CalcNewPackage", new object[]
                                                          {
                                                              key,
                                                              accountId,
                                                              requestXml
                                                          }, callback, asyncState);
        }

        /// <remarks/>
        public string EndCalcNewPackage(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string) (results[0]));
        }

        /// <remarks/>
        public void CalcNewPackageAsync(string key, int accountId, string requestXml)
        {
            this.CalcNewPackageAsync(key, accountId, requestXml, null);
        }

        /// <remarks/>
        public void CalcNewPackageAsync(string key, int accountId, string requestXml, object userState)
        {
            if ((this.CalcNewPackageOperationCompleted == null))
            {
                this.CalcNewPackageOperationCompleted =
                    new System.Threading.SendOrPostCallback(this.OnCalcNewPackageOperationCompleted);
            }
            this.InvokeAsync("CalcNewPackage", new object[]
                                                   {
                                                       key,
                                                       accountId,
                                                       requestXml
                                                   }, this.CalcNewPackageOperationCompleted, userState);
        }

        private void OnCalcNewPackageOperationCompleted(object arg)
        {
            if ((this.CalcNewPackageCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs =
                    ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                this.CalcNewPackageCompleted(this,
                                             new CalcNewPackageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                                  invokeArgs.Cancelled,
                                                                                  invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute(
            "http://federation.caspio.com/BridgePayWS/GetAvailableAddOns",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAvailableAddOns(string key, int accountId, int newTypeId)
        {
            object[] results = this.Invoke("GetAvailableAddOns", new object[]
                                                                     {
                                                                         key,
                                                                         accountId,
                                                                         newTypeId
                                                                     });
            return ((string) (results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetAvailableAddOns(string key, int accountId, int newTypeId,
                                                           System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetAvailableAddOns", new object[]
                                                              {
                                                                  key,
                                                                  accountId,
                                                                  newTypeId
                                                              }, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetAvailableAddOns(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string) (results[0]));
        }

        /// <remarks/>
        public void GetAvailableAddOnsAsync(string key, int accountId, int newTypeId)
        {
            this.GetAvailableAddOnsAsync(key, accountId, newTypeId, null);
        }

        /// <remarks/>
        public void GetAvailableAddOnsAsync(string key, int accountId, int newTypeId, object userState)
        {
            if ((this.GetAvailableAddOnsOperationCompleted == null))
            {
                this.GetAvailableAddOnsOperationCompleted =
                    new System.Threading.SendOrPostCallback(this.OnGetAvailableAddOnsOperationCompleted);
            }
            this.InvokeAsync("GetAvailableAddOns", new object[]
                                                       {
                                                           key,
                                                           accountId,
                                                           newTypeId
                                                       }, this.GetAvailableAddOnsOperationCompleted, userState);
        }

        private void OnGetAvailableAddOnsOperationCompleted(object arg)
        {
            if ((this.GetAvailableAddOnsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs =
                    ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                this.GetAvailableAddOnsCompleted(this,
                                                 new GetAvailableAddOnsCompletedEventArgs(invokeArgs.Results,
                                                                                          invokeArgs.Error,
                                                                                          invokeArgs.Cancelled,
                                                                                          invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute(
            "http://federation.caspio.com/BridgePayWS/ListIndustries",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable ListIndustries()
        {
            object[] results = this.Invoke("ListIndustries", new object[0]);
            return ((System.Data.DataTable) (results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginListIndustries(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ListIndustries", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public System.Data.DataTable EndListIndustries(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataTable) (results[0]));
        }

        /// <remarks/>
        public void ListIndustriesAsync()
        {
            this.ListIndustriesAsync(null);
        }

        /// <remarks/>
        public void ListIndustriesAsync(object userState)
        {
            if ((this.ListIndustriesOperationCompleted == null))
            {
                this.ListIndustriesOperationCompleted =
                    new System.Threading.SendOrPostCallback(this.OnListIndustriesOperationCompleted);
            }
            this.InvokeAsync("ListIndustries", new object[0], this.ListIndustriesOperationCompleted, userState);
        }

        private void OnListIndustriesOperationCompleted(object arg)
        {
            if ((this.ListIndustriesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs =
                    ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                this.ListIndustriesCompleted(this,
                                             new ListIndustriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                                  invokeArgs.Cancelled,
                                                                                  invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute(
            "http://federation.caspio.com/BridgePayWS/ListCountries",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable ListCountries()
        {
            object[] results = this.Invoke("ListCountries", new object[0]);
            return ((System.Data.DataTable) (results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginListCountries(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ListCountries", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public System.Data.DataTable EndListCountries(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataTable) (results[0]));
        }

        /// <remarks/>
        public void ListCountriesAsync()
        {
            this.ListCountriesAsync(null);
        }

        /// <remarks/>
        public void ListCountriesAsync(object userState)
        {
            if ((this.ListCountriesOperationCompleted == null))
            {
                this.ListCountriesOperationCompleted =
                    new System.Threading.SendOrPostCallback(this.OnListCountriesOperationCompleted);
            }
            this.InvokeAsync("ListCountries", new object[0], this.ListCountriesOperationCompleted, userState);
        }

        private void OnListCountriesOperationCompleted(object arg)
        {
            if ((this.ListCountriesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs =
                    ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                this.ListCountriesCompleted(this,
                                            new ListCountriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                                invokeArgs.Cancelled,
                                                                                invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute(
            "http://federation.caspio.com/BridgePayWS/CPSValidateSession",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CPSValidateSession(string key, string sessionKey)
        {
            this.Invoke("CPSValidateSession", new object[]
                                                  {
                                                      key,
                                                      sessionKey
                                                  });
        }

        /// <remarks/>
        public System.IAsyncResult BeginCPSValidateSession(string key, string sessionKey, System.AsyncCallback callback,
                                                           object asyncState)
        {
            return this.BeginInvoke("CPSValidateSession", new object[]
                                                              {
                                                                  key,
                                                                  sessionKey
                                                              }, callback, asyncState);
        }

        /// <remarks/>
        public void EndCPSValidateSession(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void CPSValidateSessionAsync(string key, string sessionKey)
        {
            this.CPSValidateSessionAsync(key, sessionKey, null);
        }

        /// <remarks/>
        public void CPSValidateSessionAsync(string key, string sessionKey, object userState)
        {
            if ((this.CPSValidateSessionOperationCompleted == null))
            {
                this.CPSValidateSessionOperationCompleted =
                    new System.Threading.SendOrPostCallback(this.OnCPSValidateSessionOperationCompleted);
            }
            this.InvokeAsync("CPSValidateSession", new object[]
                                                       {
                                                           key,
                                                           sessionKey
                                                       }, this.CPSValidateSessionOperationCompleted, userState);
        }

        private void OnCPSValidateSessionOperationCompleted(object arg)
        {
            if ((this.CPSValidateSessionCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs =
                    ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                this.CPSValidateSessionCompleted(this,
                                                 new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error,
                                                                                                   invokeArgs.Cancelled,
                                                                                                   invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute(
            "http://federation.caspio.com/BridgePayWS/CPSValidateAccountPassword",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CPSValidateAccountPassword(string key, string AccountName, string UserName, string Password)
        {
            object[] results = this.Invoke("CPSValidateAccountPassword", new object[]
                                                                             {
                                                                                 key,
                                                                                 AccountName,
                                                                                 UserName,
                                                                                 Password
                                                                             });
            return ((string) (results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCPSValidateAccountPassword(string key, string AccountName, string UserName,
                                                                   string Password, System.AsyncCallback callback,
                                                                   object asyncState)
        {
            return this.BeginInvoke("CPSValidateAccountPassword", new object[]
                                                                      {
                                                                          key,
                                                                          AccountName,
                                                                          UserName,
                                                                          Password
                                                                      }, callback, asyncState);
        }

        /// <remarks/>
        public string EndCPSValidateAccountPassword(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string) (results[0]));
        }

        /// <remarks/>
        public void CPSValidateAccountPasswordAsync(string key, string AccountName, string UserName, string Password)
        {
            this.CPSValidateAccountPasswordAsync(key, AccountName, UserName, Password, null);
        }

        /// <remarks/>
        public void CPSValidateAccountPasswordAsync(string key, string AccountName, string UserName, string Password,
                                                    object userState)
        {
            if ((this.CPSValidateAccountPasswordOperationCompleted == null))
            {
                this.CPSValidateAccountPasswordOperationCompleted =
                    new System.Threading.SendOrPostCallback(this.OnCPSValidateAccountPasswordOperationCompleted);
            }
            this.InvokeAsync("CPSValidateAccountPassword", new object[]
                                                               {
                                                                   key,
                                                                   AccountName,
                                                                   UserName,
                                                                   Password
                                                               }, this.CPSValidateAccountPasswordOperationCompleted,
                             userState);
        }

        private void OnCPSValidateAccountPasswordOperationCompleted(object arg)
        {
            if ((this.CPSValidateAccountPasswordCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs =
                    ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                this.CPSValidateAccountPasswordCompleted(this,
                                                         new CPSValidateAccountPasswordCompletedEventArgs(
                                                             invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled,
                                                             invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute(
            "http://federation.caspio.com/BridgePayWS/CPSGetAccountPackages",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable CPSGetAccountPackages(string key, string sessionKey)
        {
            object[] results = this.Invoke("CPSGetAccountPackages", new object[]
                                                                        {
                                                                            key,
                                                                            sessionKey
                                                                        });
            return ((System.Data.DataTable) (results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCPSGetAccountPackages(string key, string sessionKey,
                                                              System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CPSGetAccountPackages", new object[]
                                                                 {
                                                                     key,
                                                                     sessionKey
                                                                 }, callback, asyncState);
        }

        /// <remarks/>
        public System.Data.DataTable EndCPSGetAccountPackages(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataTable) (results[0]));
        }

        /// <remarks/>
        public void CPSGetAccountPackagesAsync(string key, string sessionKey)
        {
            this.CPSGetAccountPackagesAsync(key, sessionKey, null);
        }

        /// <remarks/>
        public void CPSGetAccountPackagesAsync(string key, string sessionKey, object userState)
        {
            if ((this.CPSGetAccountPackagesOperationCompleted == null))
            {
                this.CPSGetAccountPackagesOperationCompleted =
                    new System.Threading.SendOrPostCallback(this.OnCPSGetAccountPackagesOperationCompleted);
            }
            this.InvokeAsync("CPSGetAccountPackages", new object[]
                                                          {
                                                              key,
                                                              sessionKey
                                                          }, this.CPSGetAccountPackagesOperationCompleted, userState);
        }

        private void OnCPSGetAccountPackagesOperationCompleted(object arg)
        {
            if ((this.CPSGetAccountPackagesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs =
                    ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                this.CPSGetAccountPackagesCompleted(this,
                                                    new CPSGetAccountPackagesCompletedEventArgs(invokeArgs.Results,
                                                                                                invokeArgs.Error,
                                                                                                invokeArgs.Cancelled,
                                                                                                invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute(
            "http://federation.caspio.com/BridgePayWS/CPSGetCurrentAccountPackage",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CPSGetCurrentAccountPackage(string key, string sessionKey)
        {
            object[] results = this.Invoke("CPSGetCurrentAccountPackage", new object[]
                                                                              {
                                                                                  key,
                                                                                  sessionKey
                                                                              });
            return ((string) (results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCPSGetCurrentAccountPackage(string key, string sessionKey,
                                                                    System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CPSGetCurrentAccountPackage", new object[]
                                                                       {
                                                                           key,
                                                                           sessionKey
                                                                       }, callback, asyncState);
        }

        /// <remarks/>
        public string EndCPSGetCurrentAccountPackage(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string) (results[0]));
        }

        /// <remarks/>
        public void CPSGetCurrentAccountPackageAsync(string key, string sessionKey)
        {
            this.CPSGetCurrentAccountPackageAsync(key, sessionKey, null);
        }

        /// <remarks/>
        public void CPSGetCurrentAccountPackageAsync(string key, string sessionKey, object userState)
        {
            if ((this.CPSGetCurrentAccountPackageOperationCompleted == null))
            {
                this.CPSGetCurrentAccountPackageOperationCompleted =
                    new System.Threading.SendOrPostCallback(this.OnCPSGetCurrentAccountPackageOperationCompleted);
            }
            this.InvokeAsync("CPSGetCurrentAccountPackage", new object[]
                                                                {
                                                                    key,
                                                                    sessionKey
                                                                }, this.CPSGetCurrentAccountPackageOperationCompleted,
                             userState);
        }

        private void OnCPSGetCurrentAccountPackageOperationCompleted(object arg)
        {
            if ((this.CPSGetCurrentAccountPackageCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs =
                    ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                this.CPSGetCurrentAccountPackageCompleted(this,
                                                          new CPSGetCurrentAccountPackageCompletedEventArgs(
                                                              invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled,
                                                              invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute(
            "http://federation.caspio.com/BridgePayWS/CPSGetAvailableAddOns",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CPSGetAvailableAddOns(string key, string sessionKey, int packageId)
        {
            object[] results = this.Invoke("CPSGetAvailableAddOns", new object[]
                                                                        {
                                                                            key,
                                                                            sessionKey,
                                                                            packageId
                                                                        });
            return ((string) (results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCPSGetAvailableAddOns(string key, string sessionKey, int packageId,
                                                              System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CPSGetAvailableAddOns", new object[]
                                                                 {
                                                                     key,
                                                                     sessionKey,
                                                                     packageId
                                                                 }, callback, asyncState);
        }

        /// <remarks/>
        public string EndCPSGetAvailableAddOns(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string) (results[0]));
        }

        /// <remarks/>
        public void CPSGetAvailableAddOnsAsync(string key, string sessionKey, int packageId)
        {
            this.CPSGetAvailableAddOnsAsync(key, sessionKey, packageId, null);
        }

        /// <remarks/>
        public void CPSGetAvailableAddOnsAsync(string key, string sessionKey, int packageId, object userState)
        {
            if ((this.CPSGetAvailableAddOnsOperationCompleted == null))
            {
                this.CPSGetAvailableAddOnsOperationCompleted =
                    new System.Threading.SendOrPostCallback(this.OnCPSGetAvailableAddOnsOperationCompleted);
            }
            this.InvokeAsync("CPSGetAvailableAddOns", new object[]
                                                          {
                                                              key,
                                                              sessionKey,
                                                              packageId
                                                          }, this.CPSGetAvailableAddOnsOperationCompleted, userState);
        }

        private void OnCPSGetAvailableAddOnsOperationCompleted(object arg)
        {
            if ((this.CPSGetAvailableAddOnsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs =
                    ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                this.CPSGetAvailableAddOnsCompleted(this,
                                                    new CPSGetAvailableAddOnsCompletedEventArgs(invokeArgs.Results,
                                                                                                invokeArgs.Error,
                                                                                                invokeArgs.Cancelled,
                                                                                                invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute(
            "http://federation.caspio.com/BridgePayWS/CPSCheckPromotionCode",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CPSCheckPromotionCode(string key, string sessionKey, string promotionCodeValue, int packageId)
        {
            object[] results = this.Invoke("CPSCheckPromotionCode", new object[]
                                                                        {
                                                                            key,
                                                                            sessionKey,
                                                                            promotionCodeValue,
                                                                            packageId
                                                                        });
            return ((string) (results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCPSCheckPromotionCode(string key, string sessionKey, string promotionCodeValue,
                                                              int packageId, System.AsyncCallback callback,
                                                              object asyncState)
        {
            return this.BeginInvoke("CPSCheckPromotionCode", new object[]
                                                                 {
                                                                     key,
                                                                     sessionKey,
                                                                     promotionCodeValue,
                                                                     packageId
                                                                 }, callback, asyncState);
        }

        /// <remarks/>
        public string EndCPSCheckPromotionCode(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string) (results[0]));
        }

        /// <remarks/>
        public void CPSCheckPromotionCodeAsync(string key, string sessionKey, string promotionCodeValue, int packageId)
        {
            this.CPSCheckPromotionCodeAsync(key, sessionKey, promotionCodeValue, packageId, null);
        }

        /// <remarks/>
        public void CPSCheckPromotionCodeAsync(string key, string sessionKey, string promotionCodeValue, int packageId,
                                               object userState)
        {
            if ((this.CPSCheckPromotionCodeOperationCompleted == null))
            {
                this.CPSCheckPromotionCodeOperationCompleted =
                    new System.Threading.SendOrPostCallback(this.OnCPSCheckPromotionCodeOperationCompleted);
            }
            this.InvokeAsync("CPSCheckPromotionCode", new object[]
                                                          {
                                                              key,
                                                              sessionKey,
                                                              promotionCodeValue,
                                                              packageId
                                                          }, this.CPSCheckPromotionCodeOperationCompleted, userState);
        }

        private void OnCPSCheckPromotionCodeOperationCompleted(object arg)
        {
            if ((this.CPSCheckPromotionCodeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs =
                    ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                this.CPSCheckPromotionCodeCompleted(this,
                                                    new CPSCheckPromotionCodeCompletedEventArgs(invokeArgs.Results,
                                                                                                invokeArgs.Error,
                                                                                                invokeArgs.Cancelled,
                                                                                                invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute(
            "http://federation.caspio.com/BridgePayWS/CPSGetContactInfo",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable CPSGetContactInfo(string key, string sessionKey)
        {
            object[] results = this.Invoke("CPSGetContactInfo", new object[]
                                                                    {
                                                                        key,
                                                                        sessionKey
                                                                    });
            return ((System.Data.DataTable) (results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCPSGetContactInfo(string key, string sessionKey, System.AsyncCallback callback,
                                                          object asyncState)
        {
            return this.BeginInvoke("CPSGetContactInfo", new object[]
                                                             {
                                                                 key,
                                                                 sessionKey
                                                             }, callback, asyncState);
        }

        /// <remarks/>
        public System.Data.DataTable EndCPSGetContactInfo(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataTable) (results[0]));
        }

        /// <remarks/>
        public void CPSGetContactInfoAsync(string key, string sessionKey)
        {
            this.CPSGetContactInfoAsync(key, sessionKey, null);
        }

        /// <remarks/>
        public void CPSGetContactInfoAsync(string key, string sessionKey, object userState)
        {
            if ((this.CPSGetContactInfoOperationCompleted == null))
            {
                this.CPSGetContactInfoOperationCompleted =
                    new System.Threading.SendOrPostCallback(this.OnCPSGetContactInfoOperationCompleted);
            }
            this.InvokeAsync("CPSGetContactInfo", new object[]
                                                      {
                                                          key,
                                                          sessionKey
                                                      }, this.CPSGetContactInfoOperationCompleted, userState);
        }

        private void OnCPSGetContactInfoOperationCompleted(object arg)
        {
            if ((this.CPSGetContactInfoCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs =
                    ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                this.CPSGetContactInfoCompleted(this,
                                                new CPSGetContactInfoCompletedEventArgs(invokeArgs.Results,
                                                                                        invokeArgs.Error,
                                                                                        invokeArgs.Cancelled,
                                                                                        invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute(
            "http://federation.caspio.com/BridgePayWS/CPSGetBillingInfo",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable CPSGetBillingInfo(string key, string sessionKey)
        {
            object[] results = this.Invoke("CPSGetBillingInfo", new object[]
                                                                    {
                                                                        key,
                                                                        sessionKey
                                                                    });
            return ((System.Data.DataTable) (results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCPSGetBillingInfo(string key, string sessionKey, System.AsyncCallback callback,
                                                          object asyncState)
        {
            return this.BeginInvoke("CPSGetBillingInfo", new object[]
                                                             {
                                                                 key,
                                                                 sessionKey
                                                             }, callback, asyncState);
        }

        /// <remarks/>
        public System.Data.DataTable EndCPSGetBillingInfo(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataTable) (results[0]));
        }

        /// <remarks/>
        public void CPSGetBillingInfoAsync(string key, string sessionKey)
        {
            this.CPSGetBillingInfoAsync(key, sessionKey, null);
        }

        /// <remarks/>
        public void CPSGetBillingInfoAsync(string key, string sessionKey, object userState)
        {
            if ((this.CPSGetBillingInfoOperationCompleted == null))
            {
                this.CPSGetBillingInfoOperationCompleted =
                    new System.Threading.SendOrPostCallback(this.OnCPSGetBillingInfoOperationCompleted);
            }
            this.InvokeAsync("CPSGetBillingInfo", new object[]
                                                      {
                                                          key,
                                                          sessionKey
                                                      }, this.CPSGetBillingInfoOperationCompleted, userState);
        }

        private void OnCPSGetBillingInfoOperationCompleted(object arg)
        {
            if ((this.CPSGetBillingInfoCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs =
                    ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                this.CPSGetBillingInfoCompleted(this,
                                                new CPSGetBillingInfoCompletedEventArgs(invokeArgs.Results,
                                                                                        invokeArgs.Error,
                                                                                        invokeArgs.Cancelled,
                                                                                        invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute(
            "http://federation.caspio.com/BridgePayWS/CPSSetContactInfo",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CPSSetContactInfo(
            string key,
            string sessionKey,
            string firstName,
            string lastName,
            string title,
            string company,
            string employees,
            string industry,
            string phone,
            string secondaryPhone,
            string email,
            string url,
            string address1,
            string address2,
            string city,
            string state,
            string country,
            string zip)
        {
            this.Invoke("CPSSetContactInfo", new object[]
                                                 {
                                                     key,
                                                     sessionKey,
                                                     firstName,
                                                     lastName,
                                                     title,
                                                     company,
                                                     employees,
                                                     industry,
                                                     phone,
                                                     secondaryPhone,
                                                     email,
                                                     url,
                                                     address1,
                                                     address2,
                                                     city,
                                                     state,
                                                     country,
                                                     zip
                                                 });
        }

        /// <remarks/>
        public System.IAsyncResult BeginCPSSetContactInfo(
            string key,
            string sessionKey,
            string firstName,
            string lastName,
            string title,
            string company,
            string employees,
            string industry,
            string phone,
            string secondaryPhone,
            string email,
            string url,
            string address1,
            string address2,
            string city,
            string state,
            string country,
            string zip,
            System.AsyncCallback callback,
            object asyncState)
        {
            return this.BeginInvoke("CPSSetContactInfo", new object[]
                                                             {
                                                                 key,
                                                                 sessionKey,
                                                                 firstName,
                                                                 lastName,
                                                                 title,
                                                                 company,
                                                                 employees,
                                                                 industry,
                                                                 phone,
                                                                 secondaryPhone,
                                                                 email,
                                                                 url,
                                                                 address1,
                                                                 address2,
                                                                 city,
                                                                 state,
                                                                 country,
                                                                 zip
                                                             }, callback, asyncState);
        }

        /// <remarks/>
        public void EndCPSSetContactInfo(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void CPSSetContactInfoAsync(
            string key,
            string sessionKey,
            string firstName,
            string lastName,
            string title,
            string company,
            string employees,
            string industry,
            string phone,
            string secondaryPhone,
            string email,
            string url,
            string address1,
            string address2,
            string city,
            string state,
            string country,
            string zip)
        {
            this.CPSSetContactInfoAsync(key, sessionKey, firstName, lastName, title, company, employees, industry, phone,
                                        secondaryPhone, email, url, address1, address2, city, state, country, zip, null);
        }

        /// <remarks/>
        public void CPSSetContactInfoAsync(
            string key,
            string sessionKey,
            string firstName,
            string lastName,
            string title,
            string company,
            string employees,
            string industry,
            string phone,
            string secondaryPhone,
            string email,
            string url,
            string address1,
            string address2,
            string city,
            string state,
            string country,
            string zip,
            object userState)
        {
            if ((this.CPSSetContactInfoOperationCompleted == null))
            {
                this.CPSSetContactInfoOperationCompleted =
                    new System.Threading.SendOrPostCallback(this.OnCPSSetContactInfoOperationCompleted);
            }
            this.InvokeAsync("CPSSetContactInfo", new object[]
                                                      {
                                                          key,
                                                          sessionKey,
                                                          firstName,
                                                          lastName,
                                                          title,
                                                          company,
                                                          employees,
                                                          industry,
                                                          phone,
                                                          secondaryPhone,
                                                          email,
                                                          url,
                                                          address1,
                                                          address2,
                                                          city,
                                                          state,
                                                          country,
                                                          zip
                                                      }, this.CPSSetContactInfoOperationCompleted, userState);
        }

        private void OnCPSSetContactInfoOperationCompleted(object arg)
        {
            if ((this.CPSSetContactInfoCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs =
                    ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                this.CPSSetContactInfoCompleted(this,
                                                new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error,
                                                                                                  invokeArgs.Cancelled,
                                                                                                  invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute(
            "http://federation.caspio.com/BridgePayWS/CPSSetBillingInfo",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CPSSetBillingInfo(
            string firstName,
            string lastName,
            string address1,
            string address2,
            string city,
            string state,
            string zip,
            string country,
            string phone,
            string email,
            string ccNumber,
            string ccType,
            string ccExpMonth,
            string ccExpYear,
            bool emailReceipt,
            string receiptEmails)
        {
            this.Invoke("CPSSetBillingInfo", new object[]
                                                 {
                                                     firstName,
                                                     lastName,
                                                     address1,
                                                     address2,
                                                     city,
                                                     state,
                                                     zip,
                                                     country,
                                                     phone,
                                                     email,
                                                     ccNumber,
                                                     ccType,
                                                     ccExpMonth,
                                                     ccExpYear,
                                                     emailReceipt,
                                                     receiptEmails
                                                 });
        }

        /// <remarks/>
        public System.IAsyncResult BeginCPSSetBillingInfo(
            string firstName,
            string lastName,
            string address1,
            string address2,
            string city,
            string state,
            string zip,
            string country,
            string phone,
            string email,
            string ccNumber,
            string ccType,
            string ccExpMonth,
            string ccExpYear,
            bool emailReceipt,
            string receiptEmails,
            System.AsyncCallback callback,
            object asyncState)
        {
            return this.BeginInvoke("CPSSetBillingInfo", new object[]
                                                             {
                                                                 firstName,
                                                                 lastName,
                                                                 address1,
                                                                 address2,
                                                                 city,
                                                                 state,
                                                                 zip,
                                                                 country,
                                                                 phone,
                                                                 email,
                                                                 ccNumber,
                                                                 ccType,
                                                                 ccExpMonth,
                                                                 ccExpYear,
                                                                 emailReceipt,
                                                                 receiptEmails
                                                             }, callback, asyncState);
        }

        /// <remarks/>
        public void EndCPSSetBillingInfo(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void CPSSetBillingInfoAsync(
            string firstName,
            string lastName,
            string address1,
            string address2,
            string city,
            string state,
            string zip,
            string country,
            string phone,
            string email,
            string ccNumber,
            string ccType,
            string ccExpMonth,
            string ccExpYear,
            bool emailReceipt,
            string receiptEmails)
        {
            this.CPSSetBillingInfoAsync(firstName, lastName, address1, address2, city, state, zip, country, phone, email,
                                        ccNumber, ccType, ccExpMonth, ccExpYear, emailReceipt, receiptEmails, null);
        }

        /// <remarks/>
        public void CPSSetBillingInfoAsync(
            string firstName,
            string lastName,
            string address1,
            string address2,
            string city,
            string state,
            string zip,
            string country,
            string phone,
            string email,
            string ccNumber,
            string ccType,
            string ccExpMonth,
            string ccExpYear,
            bool emailReceipt,
            string receiptEmails,
            object userState)
        {
            if ((this.CPSSetBillingInfoOperationCompleted == null))
            {
                this.CPSSetBillingInfoOperationCompleted =
                    new System.Threading.SendOrPostCallback(this.OnCPSSetBillingInfoOperationCompleted);
            }
            this.InvokeAsync("CPSSetBillingInfo", new object[]
                                                      {
                                                          firstName,
                                                          lastName,
                                                          address1,
                                                          address2,
                                                          city,
                                                          state,
                                                          zip,
                                                          country,
                                                          phone,
                                                          email,
                                                          ccNumber,
                                                          ccType,
                                                          ccExpMonth,
                                                          ccExpYear,
                                                          emailReceipt,
                                                          receiptEmails
                                                      }, this.CPSSetBillingInfoOperationCompleted, userState);
        }

        private void OnCPSSetBillingInfoOperationCompleted(object arg)
        {
            if ((this.CPSSetBillingInfoCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs =
                    ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                this.CPSSetBillingInfoCompleted(this,
                                                new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error,
                                                                                                  invokeArgs.Cancelled,
                                                                                                  invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute(
            "http://federation.caspio.com/BridgePayWS/CPSCalcNewPackage",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CPSCalcNewPackage(string key, string sessionKey, string newPackageName, int newBillingCycle,
                                        int promoCodeId, string addOnsXml)
        {
            object[] results = this.Invoke("CPSCalcNewPackage", new object[]
                                                                    {
                                                                        key,
                                                                        sessionKey,
                                                                        newPackageName,
                                                                        newBillingCycle,
                                                                        promoCodeId,
                                                                        addOnsXml
                                                                    });
            return ((string) (results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCPSCalcNewPackage(string key, string sessionKey, string newPackageName,
                                                          int newBillingCycle, int promoCodeId, string addOnsXml,
                                                          System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CPSCalcNewPackage", new object[]
                                                             {
                                                                 key,
                                                                 sessionKey,
                                                                 newPackageName,
                                                                 newBillingCycle,
                                                                 promoCodeId,
                                                                 addOnsXml
                                                             }, callback, asyncState);
        }

        /// <remarks/>
        public string EndCPSCalcNewPackage(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string) (results[0]));
        }

        /// <remarks/>
        public void CPSCalcNewPackageAsync(string key, string sessionKey, string newPackageName, int newBillingCycle,
                                           int promoCodeId, string addOnsXml)
        {
            this.CPSCalcNewPackageAsync(key, sessionKey, newPackageName, newBillingCycle, promoCodeId, addOnsXml, null);
        }

        /// <remarks/>
        public void CPSCalcNewPackageAsync(string key, string sessionKey, string newPackageName, int newBillingCycle,
                                           int promoCodeId, string addOnsXml, object userState)
        {
            if ((this.CPSCalcNewPackageOperationCompleted == null))
            {
                this.CPSCalcNewPackageOperationCompleted =
                    new System.Threading.SendOrPostCallback(this.OnCPSCalcNewPackageOperationCompleted);
            }
            this.InvokeAsync("CPSCalcNewPackage", new object[]
                                                      {
                                                          key,
                                                          sessionKey,
                                                          newPackageName,
                                                          newBillingCycle,
                                                          promoCodeId,
                                                          addOnsXml
                                                      }, this.CPSCalcNewPackageOperationCompleted, userState);
        }

        private void OnCPSCalcNewPackageOperationCompleted(object arg)
        {
            if ((this.CPSCalcNewPackageCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs =
                    ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                this.CPSCalcNewPackageCompleted(this,
                                                new CPSCalcNewPackageCompletedEventArgs(invokeArgs.Results,
                                                                                        invokeArgs.Error,
                                                                                        invokeArgs.Cancelled,
                                                                                        invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute(
            "http://federation.caspio.com/BridgePayWS/CPSDoUpgradeDowngradeAccount",
            RequestNamespace = "http://federation.caspio.com/BridgePayWS",
            ResponseNamespace = "http://federation.caspio.com/BridgePayWS",
            Use = System.Web.Services.Description.SoapBindingUse.Literal,
            ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CPSDoUpgradeDowngradeAccount(string key, string sessionKey, string newPackageName,
                                                   int newBillingCycle, int promoCodeId, string addOnsXml)
        {
            object[] results = this.Invoke("CPSDoUpgradeDowngradeAccount", new object[]
                                                                               {
                                                                                   key,
                                                                                   sessionKey,
                                                                                   newPackageName,
                                                                                   newBillingCycle,
                                                                                   promoCodeId,
                                                                                   addOnsXml
                                                                               });
            return ((string) (results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCPSDoUpgradeDowngradeAccount(string key, string sessionKey,
                                                                     string newPackageName, int newBillingCycle,
                                                                     int promoCodeId, string addOnsXml,
                                                                     System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CPSDoUpgradeDowngradeAccount", new object[]
                                                                        {
                                                                            key,
                                                                            sessionKey,
                                                                            newPackageName,
                                                                            newBillingCycle,
                                                                            promoCodeId,
                                                                            addOnsXml
                                                                        }, callback, asyncState);
        }

        /// <remarks/>
        public string EndCPSDoUpgradeDowngradeAccount(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string) (results[0]));
        }

        /// <remarks/>
        public void CPSDoUpgradeDowngradeAccountAsync(string key, string sessionKey, string newPackageName,
                                                      int newBillingCycle, int promoCodeId, string addOnsXml)
        {
            this.CPSDoUpgradeDowngradeAccountAsync(key, sessionKey, newPackageName, newBillingCycle, promoCodeId,
                                                   addOnsXml, null);
        }

        /// <remarks/>
        public void CPSDoUpgradeDowngradeAccountAsync(string key, string sessionKey, string newPackageName,
                                                      int newBillingCycle, int promoCodeId, string addOnsXml,
                                                      object userState)
        {
            if ((this.CPSDoUpgradeDowngradeAccountOperationCompleted == null))
            {
                this.CPSDoUpgradeDowngradeAccountOperationCompleted =
                    new System.Threading.SendOrPostCallback(this.OnCPSDoUpgradeDowngradeAccountOperationCompleted);
            }
            this.InvokeAsync("CPSDoUpgradeDowngradeAccount", new object[]
                                                                 {
                                                                     key,
                                                                     sessionKey,
                                                                     newPackageName,
                                                                     newBillingCycle,
                                                                     promoCodeId,
                                                                     addOnsXml
                                                                 }, this.CPSDoUpgradeDowngradeAccountOperationCompleted,
                             userState);
        }

        private void OnCPSDoUpgradeDowngradeAccountOperationCompleted(object arg)
        {
            if ((this.CPSDoUpgradeDowngradeAccountCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs =
                    ((System.Web.Services.Protocols.InvokeCompletedEventArgs) (arg));
                this.CPSDoUpgradeDowngradeAccountCompleted(this,
                                                           new CPSDoUpgradeDowngradeAccountCompletedEventArgs(
                                                               invokeArgs.Results, invokeArgs.Error,
                                                               invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void DoCancelAccountCompletedEventHandler(object sender, DoCancelAccountCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoCancelAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DoCancelAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled,
                                                   object userState) :
                                                       base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string) (this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void DoUpgradeDowngradeAccountCompletedEventHandler(
        object sender, DoUpgradeDowngradeAccountCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoUpgradeDowngradeAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DoUpgradeDowngradeAccountCompletedEventArgs(object[] results, System.Exception exception,
                                                             bool cancelled, object userState) :
                                                                 base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string) (this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void DoChargePastDueAccountCompletedEventHandler(
        object sender, DoChargePastDueAccountCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoChargePastDueAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DoChargePastDueAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled,
                                                          object userState) :
                                                              base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string) (this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetInvoicesListCompletedEventHandler(object sender, GetInvoicesListCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInvoicesListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetInvoicesListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled,
                                                   object userState) :
                                                       base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string) (this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetReceiptsListCompletedEventHandler(object sender, GetReceiptsListCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReceiptsListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetReceiptsListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled,
                                                   object userState) :
                                                       base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string) (this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetInvoicesPrintableFileCompletedEventHandler(
        object sender, GetInvoicesPrintableFileCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInvoicesPrintableFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetInvoicesPrintableFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled,
                                                            object userState) :
                                                                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public byte[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((byte[]) (this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetReceiptsPrintableFileCompletedEventHandler(
        object sender, GetReceiptsPrintableFileCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReceiptsPrintableFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetReceiptsPrintableFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled,
                                                            object userState) :
                                                                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public byte[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((byte[]) (this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetAccountPackageCompletedEventHandler(object sender, GetAccountPackageCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccountPackageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetAccountPackageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled,
                                                     object userState) :
                                                         base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string) (this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void CheckPromotionCodeCompletedEventHandler(object sender, CheckPromotionCodeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckPromotionCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CheckPromotionCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled,
                                                      object userState) :
                                                          base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string) (this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void CalcNewPackageCompletedEventHandler(object sender, CalcNewPackageCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CalcNewPackageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CalcNewPackageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled,
                                                  object userState) :
                                                      base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string) (this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetAvailableAddOnsCompletedEventHandler(object sender, GetAvailableAddOnsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailableAddOnsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetAvailableAddOnsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled,
                                                      object userState) :
                                                          base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string) (this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void ListIndustriesCompletedEventHandler(object sender, ListIndustriesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListIndustriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ListIndustriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled,
                                                  object userState) :
                                                      base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public System.Data.DataTable Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable) (this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void ListCountriesCompletedEventHandler(object sender, ListCountriesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListCountriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ListCountriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled,
                                                 object userState) :
                                                     base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public System.Data.DataTable Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable) (this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void CPSValidateSessionCompletedEventHandler(
        object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void CPSValidateAccountPasswordCompletedEventHandler(
        object sender, CPSValidateAccountPasswordCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CPSValidateAccountPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CPSValidateAccountPasswordCompletedEventArgs(object[] results, System.Exception exception,
                                                              bool cancelled, object userState) :
                                                                  base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string) (this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void CPSGetAccountPackagesCompletedEventHandler(
        object sender, CPSGetAccountPackagesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CPSGetAccountPackagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CPSGetAccountPackagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled,
                                                         object userState) :
                                                             base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public System.Data.DataTable Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable) (this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void CPSGetCurrentAccountPackageCompletedEventHandler(
        object sender, CPSGetCurrentAccountPackageCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CPSGetCurrentAccountPackageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CPSGetCurrentAccountPackageCompletedEventArgs(object[] results, System.Exception exception,
                                                               bool cancelled, object userState) :
                                                                   base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string) (this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void CPSGetAvailableAddOnsCompletedEventHandler(
        object sender, CPSGetAvailableAddOnsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CPSGetAvailableAddOnsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CPSGetAvailableAddOnsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled,
                                                         object userState) :
                                                             base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string) (this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void CPSCheckPromotionCodeCompletedEventHandler(
        object sender, CPSCheckPromotionCodeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CPSCheckPromotionCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CPSCheckPromotionCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled,
                                                         object userState) :
                                                             base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string) (this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void CPSGetContactInfoCompletedEventHandler(object sender, CPSGetContactInfoCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CPSGetContactInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CPSGetContactInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled,
                                                     object userState) :
                                                         base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public System.Data.DataTable Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable) (this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void CPSGetBillingInfoCompletedEventHandler(object sender, CPSGetBillingInfoCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CPSGetBillingInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CPSGetBillingInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled,
                                                     object userState) :
                                                         base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public System.Data.DataTable Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable) (this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void CPSSetContactInfoCompletedEventHandler(
        object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void CPSSetBillingInfoCompletedEventHandler(
        object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void CPSCalcNewPackageCompletedEventHandler(object sender, CPSCalcNewPackageCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CPSCalcNewPackageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CPSCalcNewPackageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled,
                                                     object userState) :
                                                         base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string) (this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void CPSDoUpgradeDowngradeAccountCompletedEventHandler(
        object sender, CPSDoUpgradeDowngradeAccountCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CPSDoUpgradeDowngradeAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CPSDoUpgradeDowngradeAccountCompletedEventArgs(object[] results, System.Exception exception,
                                                                bool cancelled, object userState) :
                                                                    base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string) (this.results[0]));
            }
        }
    }
}